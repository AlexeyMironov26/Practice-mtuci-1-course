import sqlite3

db = sqlite3.connect("vacinfo.db")#создаём новую базу данных, connect позволяет подключиться к какой либо базе данных, внутрь вписываем название файла, который будет работать с базой данных, если у нас этого файла в текущей папке нет, то он создатся

curs = db.cursor() #создаём курсор
 #cоздаём таблицу (только если она уже не существует) с названием vacancies (саму команду лучше прописывать в верхнем регистре, а названия в нижнем), в таблице пропишем поля, т е места, которые мы будем заполнять информацией
curs.execute("""CREATE TABLE IF NOT EXISTS vacancies (
    title text,
    salary text,
    job_experience text,
    shedule text,
    link text
)""") #Метод execute позволяет прописать нам какую то sql команду в виде строки и выполнить её сразу же

#внутри таблицы пишем название поля и тип данных, который будем в него сохранять
#мы можем закомментировать нашу таблицу, чтобы она не создавалсь каждый раз заново

curs.execute("INSERT INTO vacancies VALUES('namevIP', '25rub', '3 day', '24/7', 'https://uall')") #заполняем таблицу значениями
#каждый запуск эта команада будет записывать эти данные в нашу таблицу
#чтобы заполнить не все поля, а например только 2ое и 3е, можем добавить после vacancies эти поля (salary, job_experience) и естественно в values мы тоже указываем только их последовательно

#удаление определённых данных. если не дописывать какое либо условие, то мы удалим все данные из этой таблицы, если указать условие, то удалятся все записи, ему соответствующие
curs.execute("DELETE FROM vacancies WHERE job_experience = '1 day' ")

priviligue = '3 years'
title1 = 'namevIP'
#обновление данных
curs.execute("UPDATE vacancies SET job_experience = ? WHERE title = ?", (priviligue, title1)) #после set пишем значения, который мы собираемся обновлять
#с помощью знака вопроса в sqlite обозначаем переменные, а с помощью кортежа в конце запроса задаём то, что ставим на места этих переменных
#используем executemany, если хотим заполнить сразу несколько строчек таблицы, например пока не закончатся кортежи с данными, которые мы вставляем

#получение записей из бд, выборка данных, после select либо пишем через запятую нужные нам поля, либо пишем *, выбирая все поля
curs.execute("SELECT rowid, * FROM vacancies WHERE rowid >= 4 ORDER BY rowid DESC") #если мы допишем параметр rowid, то сможем получить уникальный идентификатор каждой нашей записи
#мы можем поставить условие с помощью where и выбирать только элементы, соответствующие этому условию
#WHERE title <> 'cotlin' - ищем все кортежи, где заголовок не равен cotlin
#ORDER BY сортировка какого параметра параметру, можем указать DESC, что будет значить "по убыванию", если не прописывать слово DESC, будет по возрастанию

#print(curs.fetchall()) #извлекаем все записи из нашей таблицы за счёт fetchall и выводим их
#print(curs.fetchmany(2)) #с помощью fetchmany можем выбрать определённое количество первых записей
#print(curs.fetchone()[2]) #выбираем первую запись и возвращаем кортеж, также можем указать номер элемента в кортеже и вывести только его
items = curs.fetchall()

for el in items:
    print(el[1]+"\n"+el[3]) #выводим определённые элементы каждого кортежа из списка







db.commit()#после того, как мы создали курсор и с помощью него выполнили действия мы обоновляем базу данных коммандой commit, чтобы изменения записались в неё


db.close()#в конце всегда закрываем базу данных, чтобы не было утечки памяти и программа работала лучше